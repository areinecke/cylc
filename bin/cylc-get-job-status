#!/bin/bash

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2014 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

# DEBUGGING: with 'set -x' output will be printed to cylc stderr in
# debug mode (the poll succeeded hook prints command stderr output to
# suite stderr).

function poll_job_sys() {
    # Return success if job is in job submission system
    python - "$@" <<'__PYTHON__'
import sys
job_sys, job_id = sys.argv[1:]
mod = __import__("cylc.job_submission." + job_sys, fromlist=[job_sys])
job_sys_proc_cls = getattr(mod, job_sys)
job_sys_proc_cls.__init__ = lambda self: None
job_sys_proc = job_sys_proc_cls()
sys.exit(job_sys_proc.poll(job_id))
__PYTHON__
}

for OPT in "$@"; do
    if [[ $OPT == '--help' || $OPT == '-h' ]]; then
        cat <<'__USAGE__'
USAGE: cylc [control] get-job-status ST-FILE JOB-SYS JOB-ID

This command is normally invoked automatically by cylc, to poll for job
status of a task. To determine the current or final state of a task
known to have been submitted previously, the automatically generated
task status file must be interpreted after interrogating the batch queue
(or similar) to see if it is currently waiting, running, or gone
(finished or failed).

Options:
  -h, --help   Print this help message and exit.

Arguments:
  ST-FILE - the task status file (written to the task log directory).
  JOB-SYS - the name of the job submission system, e.g. pbs.
  JOB-ID - the job ID in the job submission system.
__USAGE__
        exit 0
    fi
done

if (($# != 3)); then
    echo "ERROR: wrong number of args!" >&2
    exit 1
fi

ST_FILE=$1
JOB_SYS=$2
JOB_ID=$3

TASKID=$(basename ${ST_FILE%.*.status})
if [[ -f $ST_FILE ]]; then
    JOB_EXIT_TIME=$(awk -F= '$1=="CYLC_JOB_EXIT_TIME" {print $2}' $ST_FILE)
    JOB_EXIT=$(awk -F= '$1=="CYLC_JOB_EXIT" {print $2}' $ST_FILE)
    if [[ $JOB_EXIT == 'SUCCEEDED' && -n $JOB_EXIT_TIME ]]; then
        echo "polled $TASKID succeeded at $JOB_EXIT_TIME"
    elif [[ -n $JOB_EXIT && -n $JOB_EXIT_TIME ]]; then
        echo "polled $TASKID failed at $JOB_EXIT_TIME"
    elif poll_job_sys $JOB_SYS $JOB_ID; then
        # TODO - checkout status file for internal outputs
        JOB_INIT_TIME=$(awk -F= '$1=="CYLC_JOB_INIT_TIME" {print $2}' $ST_FILE)
        echo "polled $TASKID started at $JOB_INIT_TIME"
    else
        # Did not exit cleanly
        echo "polled $TASKID failed at unknown-time"
    fi
elif poll_job_sys $JOB_SYS $JOB_ID; then
    echo "polled $TASKID submitted"
else
    # FIXME: Really a "submitted" but "disappeared"!
    echo "polled $TASKID submission failed"
fi

exit
